<form action="/admin/editProduct/{{product._id}}" method="post" >
    <!-- Product Name -->
    <div class="form-group mb-3">
        <label for="productName" class="form-label fw-bold">Product Name</label>
        <input type="text" id="productName" name="productName" class="form-control" value="{{product.productName}}" required>
    </div>

    <!-- Product Description -->
    <div class="form-group mb-3">
        <label for="productDesc" class="form-label fw-bold">Description</label>
        <textarea id="productDesc" name="productDesc" class="form-control" rows="3" required>{{product.productDesc}}</textarea>
    </div>

    <div>
        <label for="quantity" class="form-label fw-bold">Quantity</label>
        <input type="number" id="quantity" name="quantity" class="form-control" value="{{product.quantity}}">
    </div>

   <div class="form-group mb-3">
    <label for="category" class="form-label fw-bold">Category</label>
    <select id="category" name="category" class="form-select" required>
        <option value="" disabled>Select a category</option>
        {{#each categories}}
            <option value="{{this._id}}" {{#if this.isSelected}}selected{{/if}}>{{this.name}}</option>
        {{/each}}
    </select>
</div>


    <!-- Product Price -->
    <div class="form-group mb-3">
        <label for="regularPrice" class="form-label fw-bold">Price</label>
        <input type="number" id="regularPrice" name="regularPrice" class="form-control" value="{{product.regularPrice}}" required>
    </div>

    <div class="form-group mb-3">
    <label class="form-label fw-bold">Existing Images</label>
    <div id="existingImagesContainer" class="d-flex flex-wrap gap-2">
        {{#each product.productImage}}
        <div class="position-relative">
            <img src="{{this}}" alt="Product Image" class="img-thumbnail" style="width: 100px; height: 100px; object-fit: cover;">
            <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 remove-image-btn" data-image="{{this}}">X</button>
        </div>
        {{/each}}
    </div>
    <input type="hidden" id="removedImages" name="removedImages" value="[]"> <!-- Hidden input to store removed images -->
</div>

    
   <div class="form-group mb-3">
    <label for="newProductImage" class="form-label fw-bold">Upload New Images</label>
    <input type="file" id="newProductImage" name="newProductImage" class="form-control" multiple accept="image/*">
    <small class="text-muted">You can upload and crop new images. Supported formats: jpg, png, gif.</small>
</div>
<!-- Cropping Modal -->
<div id="cropModal" class="modal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <canvas id="cropCanvas"></canvas>
            </div>
            <div class="modal-footer">
                <button type="button" id="cropSave" class="btn btn-success">Crop & Save</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
{{!-- <div id="imageCropContainer" style="display:none; margin-top: 20px;">
    <h5>Crop New Image:</h5>
    <img id="cropPreview" src="#" style="max-width: 100%; display: block;">
    <button type="button" id="cropNewImageButton" class="btn btn-primary mt-3">Crop & Save Image</button>
</div> --}}



    

    <!-- Submit Button -->
    <div class="text-center">
        <button type="submit" class="btn btn-primary px-5 py-2 fw-bold">Update Product</button>
    </div>
</form>
<script>
    document.querySelectorAll('.remove-image-btn').forEach((button) => {
    button.addEventListener('click', function () {
        const imageUrl = this.getAttribute('data-image');
        const removedImages = JSON.parse(document.getElementById('removedImages').value);
        removedImages.push(imageUrl);
        document.getElementById('removedImages').value = JSON.stringify(removedImages);
        this.closest('div').remove(); // Remove the image from UI
    });
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

<script>
    let cropper;
    const productImageInput = document.getElementById('productImage');
    const cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
    const cropCanvas = document.getElementById('cropCanvas');
    const cropSaveButton = document.getElementById('cropSave');

    productImageInput.addEventListener('change', function (event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                // Load the image into the canvas
                const img = new Image();
                img.src = e.target.result;
                img.onload = function () {
                    const ctx = cropCanvas.getContext('2d');
                    cropCanvas.width = img.width;
                    cropCanvas.height = img.height;
                    ctx.drawImage(img, 0, 0, img.width, img.height);

                    // Initialize Cropper.js
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(cropCanvas, {
                        aspectRatio: 1, // Adjust aspect ratio as needed
                        viewMode: 1,
                    });

                    // Show the cropping modal
                    cropModal.show();
                };
            };
            reader.readAsDataURL(file);
        }
    });

    cropSaveButton.addEventListener('click', function () {
        if (cropper) {
            // Get the cropped image data
            const croppedCanvas = cropper.getCroppedCanvas();
            const croppedImage = croppedCanvas.toDataURL('image/jpeg');

            // You can now send the cropped image to the server or replace the original
            console.log('Cropped Image:', croppedImage);

            // Close the modal
            cropModal.hide();

            // Optionally append the cropped image to the form or display it
            const preview = document.createElement('img');
            preview.src = croppedImage;
            preview.className = 'img-thumbnail';
            document.body.appendChild(preview); // Replace with your desired DOM manipulation
        }
    });
</script>



<style>
/* General Form Styling */
form {
    max-width: 600px;
    margin: 50px auto;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    font-family: Arial, sans-serif;
}

form h3 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
    font-size: 1.5rem;
}

/* Form Group Styling */
.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    color: #555;
    font-size: 1rem;
}

.form-group input,
.form-group textarea,
.form-group select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1rem;
    color: #333;
    background: #fff;
    box-sizing: border-box;
    transition: border-color 0.3s, box-shadow 0.3s;
}

/* Input Focus Effects */
.form-group input:focus,
.form-group textarea:focus,
.form-group select:focus {
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    outline: none;
}

/* Button Styling */
.btn {
    background: #007bff;
    color: #fff;
    padding: 10px 20px;
    font-size: 1rem;
    font-weight: bold;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.3s;
    text-transform: uppercase;
}

.btn:hover {
    background: #0056b3;
    transform: scale(1.05);
}

/* Center Align Text */
.text-center {
    text-align: center;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    form {
        padding: 15px;
    }

    .btn {
        padding: 10px;
    }
}
</style>