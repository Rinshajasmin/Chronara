<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Report</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    
    {{>adminheader}}


    <div class="sales-report-container">
        <div class="summary-cards">
            <div class="card">
                <h3>Today's Sales</h3>
                <p>₹{{todaysSales}}</p>
            </div>
            <div class="card">
                <h3>Today's Count</h3>
                <p>{{todaysSalesCount}}</p>
            </div>
            <div class="card">
                <h3>Today's Revenue</h3>
                <p>₹{{todaysRevenue}}</p>
            </div>
        </div>

        <div class="report-section">
        
<form id="revenueForm" method="POST">
    <div class="filters">
        <!-- Quick Filters Row -->
        <div class="filter-row">
            <label for="quick-filters">Quick Filters</label>
            <select name="filterType" id="quick-filters" onchange="toggleFilters()">
                <option value="yearly" {{#if (eq filterType 'yearly')}}selected{{/if}}>Yearly</option>
                <option value="monthly" {{#if (eq filterType 'monthly')}}selected{{/if}}>Monthly</option>
            </select>
        </div>

          <div class="filter-row" id="year-dropdown" style="display: none;">
        <label for="year-select">Select Year</label>
        <select name="year" id="year-select">
            <option value="2025">2025</option>
            <option value="2024">2024</option>
            <option value="2023">2023</option>
            <option value="2022">2022</option>
            <option value="2021">2021</option>
        </select>
    </div>

        <!-- Month Dropdown Row (hidden by default) -->
        <div class="filter-row" id="month-dropdown" style="display: none;">
            <label for="month-select">Select Month</label>
            <select name="month" id="month-select">
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5">May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">September</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
            </select>
        </div>
    </div>
<div class="parent-chart" style="display: flex;">
<div class="chart-container">
    <h2>Total Revenue </h2>

    <canvas id="revenueChart"></canvas>
</div>

<div class="cards-container">
  <!-- Card for Most Sold Items -->
  <div class="card-mostsold">
    <div class="sales-card">
      <h3>Most Sold Category</h3>
      <div id="sales-data"></div> <!-- This is where you will dynamically load data -->
    </div>
  </div>

  <!-- Card for Most Sold Brand -->
  <div class="card-mostsold">
    <div class="sales-card">
      <h3>Most Sold Item</h3>
      <div id="product-sales-data"></div> <!-- This is where you will dynamically load brand data -->
    </div>
  </div>

  <!-- Add more cards here as needed -->
  <div class="card-mostsold">
    <div class="sales-card">
      <h3>Most Sold Brands</h3>
      <div id="brand-sales-data"></div> <!-- For any other data you want to display -->
    </div>
  </div>
</div>
</div>
</form>

        </div>
    </div>
</body>
<style>
 .card-mostsold {
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  background-color: #fff;

}
.sales-card {
  width: 300px; /* Fixed width for each card */
  min-width: 250px; /* Optional: Ensures the card doesn't shrink too small */
  max-width: 350px; /* Optional: Ensures the card doesn't stretch too large */
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #fff;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
}


.sales-card h3 {
  text-align: center;
  margin-bottom: 20px;
  font-size: 1.5rem;
  font-family: 'Poppins';
}

.item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 15px;
}

.label {
  flex: 1;
  font-size: 1rem;
  margin-bottom: -25px;
  font-family: 'Poppins';
}

.progress-bar {
  flex: 3;
  height: 10px;
  background-color: #e0e0e0;
  border-radius: 5px;
  overflow: hidden;
  margin: 0 10px;
  position: relative;
}

.fill {
  height: 100%;
  border-radius: 5px;
  background-color: #325cf3; /* Single consistent color */
}

.percentage {
  flex: 1;
  font-size: 0.9rem;
  text-align: right;
  margin-left: 214px;
}

   
   
   /* General Styles for Rows */
.filter-row {
    display: flex;
    align-items: center;
    gap: 10px; /* Spacing between label and dropdown */
    margin-bottom: 15px; /* Space between rows */
    width: 464px;
}

.filter-row label {
    width: 99px; /* Fixed width for consistent alignment */
    flex-shrink: 0; /* Prevent label from shrinking */
}

.filter-row select {
    flex-grow: 1; /* Allow dropdown to grow to fit available space */
    border-radius: 8px; /* Add border radius */
    border: 1px solid #ccc; /* Add a border */
    padding: 8px; /* Add some padding inside the dropdown */
    transition: border-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transition for hover effect */
}

/* Hover effect on dropdown */
.filter-row select:hover {
    border-color: #007BFF; /* Change border color on hover */
    box-shadow: 0 0 8px rgba(0, 123, 255, 0.3); /* Add a subtle shadow on hover */
}

/* Focus effect on dropdown */
.filter-row select:focus {
    border-color: #0056b3; /* Change border color on focus */
    box-shadow: 0 0 8px rgba(0, 86, 179, 0.3); /* Add a subtle shadow on focus */
}

</style>

<script>
  // Example: Category sales data passed from the backend
  const categorySales = {{{categorySales}}};
    const productSales = {{{productSales}}};
    const  brandSales ={{{brandSales}}}


  const salesDataContainer = document.getElementById("sales-data");
    const productSalesDataContainer = document.getElementById("product-sales-data");
  const brandSalesDataContainer = document.getElementById("brand-sales-data");
  
  // Generate HTML dynamically
  categorySales.forEach(category => {
    const item = document.createElement("div");
    item.classList.add("item");

    item.innerHTML = `
      <div class="label">${category._id}
      <div class="progress-bar">
<div class="fill" style="width: ${category.percentage}%;"></div>
      </div>
      <span class="percentage">${category.percentage}%</span>
   </div> `;

    salesDataContainer.appendChild(item);
  });
   productSales.forEach(product => {
    const item = document.createElement("div");
    item.classList.add("item");

    item.innerHTML = `
      <div class="label">${product.productName}
      <div class="progress-bar">
<div class="fill" style="width: ${product.percentage}%;"></div>
      </div>
      <span class="percentage">${product.percentage}%</span>
         </div>
 `;

    productSalesDataContainer.appendChild(item);
  });

    brandSales.forEach(brand => {
    const item = document.createElement("div");
    item.classList.add("item");

    item.innerHTML = `
      <div class="label">${brand.brand}
      
      <div class="progress-bar">
<div class="fill" style="width: ${brand.percentage}%;"></div>
      </div>
      <span class="percentage">${brand.percentage}%</span>
         </div>
 `;

    brandSalesDataContainer.appendChild(item);
  });
</script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 {{!-- <script>
        // Pass the dynamic data from the backend (the years and revenue data)
        const years = {{{json years}}};  // Using triple braces to prevent escaping of JSON
        
        const yearlyRevenueData = {{{json yearlyRevenueData}}};  // Triple braces for JSON

      const dailyRevenueData = {{{json dailyRevenueData}}};
    const days = {{{json days}}}; // Array of days in the month
    const selectedMonth = {{{json month}}}; // Selected month for the monthly chart

        // Create a bar chart using Chart.js
        const ctx = document.getElementById('revenueChart').getContext('2d');
        const revenueChart = new Chart(ctx, {
            type: 'bar',
            data: {
            labels: selectedMonth === "monthly" ? days : years, // Decide if showing monthly or yearly chart
                datasets: [{
    label: selectedMonth === "monthly" ? 'Daily Revenue' : 'Yearly Revenue',
                data: selectedMonth === "monthly" ? dailyRevenueData : yearlyRevenueData,
    backgroundColor: 'rgba(75, 192, 192, 0.2)',
    borderColor: 'rgba(75, 192, 192, 1)',
    borderWidth: 1,
    barThickness: 20,       // Fixed bar width
    maxBarThickness: 30,    // Maximum bar width
    categoryPercentage: 0.6, // Space between bars within categories
    barPercentage: 0.8      // Space between bars
}]
            },
            options: {
                
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script> --}}
<script>
    let revenueChartInstance = null; // Global reference for the chart instance

    // Function to initialize or update the chart
    function initializeOrUpdateChart(labels, revenueData, chartLabel) {
        const ctx = document.getElementById('revenueChart').getContext('2d');

        // Destroy the existing chart instance if it exists
        if (revenueChartInstance) {
            revenueChartInstance.destroy();
        }

        // Create or update the chart instance
        revenueChartInstance = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: chartLabel,
                    data: revenueData,
                    backgroundColor: 'rgba(0, 86, 179, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                    barThickness: 20,
                    maxBarThickness: 30,
                    categoryPercentage: 0.6,
                    barPercentage: 0.8,
                }],
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                    },
                },
            },
        });
    }

    // On initial page load, load default data provided by the server
    document.addEventListener('DOMContentLoaded', () => {
        const defaultLabels = {{{json defaultLabels}}}; // E.g., months
        const defaultRevenueData = {{{json defaultRevenueData}}}; // Revenue data for the current year
        const defaultChartLabel = {{{json defaultChartLabel}}}; // Default chart label

        // Initialize the chart with default data
        initializeOrUpdateChart(defaultLabels, defaultRevenueData, defaultChartLabel);
    });

    // Handle filter submissions
    async function submitForm(event) {
        // Prevent the form from submitting the traditional way
        event.preventDefault();

        const filterType = document.getElementById('quick-filters').value;
        const year = document.getElementById('year-select')?.value;
        const month = document.getElementById('month-select')?.value;

        try {
            // Fetch filtered data from the backend
            const response = await fetch('/admin/getFilteredRevenue', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ filterType, month ,year}),
            });

            const data = await response.json();

            // Update the chart based on the filter type
            if (filterType === 'yearly') {
                initializeOrUpdateChart(data.months, data.monthlyRevenueData, 'Monthly Revenue');
            } else if (filterType === 'monthly') {
                initializeOrUpdateChart(data.days, data.dailyRevenueData, `Daily Revenue for Month ${month}`);
            }
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    // Add onchange event listeners for filter changes
    document.getElementById('quick-filters').addEventListener('change', submitForm);
    document.getElementById('month-select').addEventListener('change', submitForm);
    document.getElementById('year-select').addEventListener('change', submitForm);

</script>
 

<script>
 function toggleFilters() {
        const filterType = document.getElementById("quick-filters").value;
        const monthDropdown = document.getElementById("month-dropdown");
        const yearDropdown = document.getElementById("year-dropdown")

         if (filterType === "monthly") {
            monthDropdown.style.display = "flex";
            yearDropdown.style.display = "none";
        } else if (filterType === "yearly") {
            yearDropdown.style.display = "flex";
            monthDropdown.style.display = "none";
        } else {
            monthDropdown.style.display = "none";
            yearDropdown.style.display = "none";
        }
    
    }

    // Trigger toggleMonths on page load to handle pre-selected filter type
    document.addEventListener("DOMContentLoaded", () => {
        toggleFilters();
    });
</script>

<style>
    body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f9f9f9;
    color: #333;
}

.sales-report-container {
    max-width: 1200px;
    margin: 20px auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);

}

.summary-cards {
    display: flex;
    justify-content: space-between;
    gap: 20px;
    margin-bottom: 20px;
}

.card {
    flex: 1;
    background-color: #f5f5f5;
    border: 1px solid #ddd;
    border-radius: 10px;
    padding: 20px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.card h3 {
    font-size: 1.2em;
    margin-bottom: 10px;
    color: #555;
}

.card p {
    font-size: 1.5em;
    font-weight: bold;
    color: #333;
}

.report-section {
    margin-top: 20px;
}

.report-section h2 {
    font-size: 1.5em;
    margin-bottom: 20px;
    color: #333;
}

 .chart-container {
        width: 700px; /* Set the desired width */
        height: 450px; /* Set the desired height */
        margin: auto; /* Center the container */
        position: relative; /* Ensure proper positioning */
        margin-left: 12px;

        margin-bottom: 320px;
    }

    canvas {
        width: 100% !important; /* Make the canvas fill its parent container */
        height: 100% !important; /* Scale height to fit parent */
    }


   

    .filter-row select {
        flex-grow: 1; /* Allow dropdown to grow if needed */
    }

    .filter-group {
        display: flex;
        flex-direction: column; /* Label above the input/select field */
        gap: 0.3rem; /* Space between label and input */
    }

    .date-inputs {
        display: flex;
        gap: 1rem; /* Space between the start and end date fields */
    }

    .action-buttons {
        display: flex;
        align-items: center; /* Align buttons vertically */
        gap: 0.5rem; /* Space between buttons */
    }

    select, input[type="date"] {
        padding: 0.5rem ;
        font-size: 1rem;
        width: 268px;

         /* Full width for better alignment */
    }

    label {
        font-weight: bold;
    }

button {
    padding: 4px 2px;
    font-size: 0.9em;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button.generate-report {
    background-color: #007bff;
    color: #fff;
}

button.download-pdf {
    background-color: #28a745;
    color: #fff;
}

button.download-excel {
    background-color: #ffc107;
    color: #fff;
}

button:hover {
    opacity: 0.9;
}

.sales-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

.sales-table th,
.sales-table td {
    padding: 10px 15px;
    border: 1px solid #ddd;
    text-align: left;
    font-size: 0.9em;
}

.sales-table th {
    background-color: #f5f5f5;
    color: #555;
}

.sales-table tbody tr:nth-child(even) {
    background-color: #f9f9f9;
}

</style>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</html>
