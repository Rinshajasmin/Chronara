<head>
       <!-- Include Cropper.js CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

<!-- Include Cropper.js JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
</head>
{{>adminheader}}

    <!-- Add Product Form -->
    <div class="card shadow-lg">
        <div class="card-body">
            <form action="/admin/editProduct/{{product._id}}" method="POST" id="editproduct" name="editproduct"  enctype="multipart/form-data">
                <!-- Product Name -->
                <div class="form-group mb-3">
                    <label for="productName" class="form-label fw-bold">Product Name</label>
                    <input type="text" id="productName" name="productName" class="form-control" value="{{product.productName}}" required>
                     <div id="error1" class="error-message"></div>

                </div>

                <!-- Product Description -->
                <div class="form-group mb-3">
                    <label for="productDesc" class="form-label fw-bold">Description</label>
        <textarea id="productDesc" name="productDesc" class="form-control" rows="3" required>{{product.productDesc}}</textarea>
                            <div id="error2" class="error-message"></div>

                </div>

                <!-- Product Category -->
                 <div class="form-group mb-3">
    <label for="category" class="form-label fw-bold">Category</label>
    <select id="category" name="category" class="form-select" required>
        <option value="" disabled>Select a category</option>
        {{#each categories}}
            <option value="{{this._id}}" {{#if this.isSelected}}selected{{/if}}>{{this.name}}</option>
        {{/each}}
    </select>
</div> 
                <div class="form-group mb-3">
                    <label for="productOffer" class="form-label fw-bold">Product Offer</label>
                    <input type="number" id="productOffer" name="productOffer" class="form-control" value="{{product.productOffer}}" required>
                     <div id="error6" class="error-message"></div>

                </div>

                <div class="form-group mb-3">
                    <label for="brand" class="form-label fw-bold">Brand</label>
                    <input type="text" id="brand" name="brand" class="form-control" value="{{product.brand}}" required>
                    <div id="error3" class="error-message"></div>

                </div>

                <!-- Product Price -->
                <div class="form-group mb-3">
                    <label for="regularPrice" class="form-label fw-bold">Price</label>
                    <input type="number" id="regularPrice" name="regularPrice" class="form-control" value="{{product.regularPrice}}" required>
                     <div id="error4" class="error-message"></div>

                </div>
                <div class="form-group mb-3">
                    <label for="quantity" class="form-label fw-bold">Quantity</label>
                    <input type="number" id="quantity" name="quantity" class="form-control" value="{{product.quantity}}" required>
                     <div id="error5" class="error-message"></div>

                </div>



<div class="form-group mb-3">
    <label class="form-label fw-bold">Existing Images</label>
    <div id="existingImagesContainer" class="d-flex flex-wrap gap-2">
        {{#each product.productImage}}
        <div class="position-relative" id="image-{{@index}}">
            <img src="{{this}}" alt="Product Image" class="img-thumbnail" style="width: 100px; height: 100px; object-fit: cover;">
            <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 remove-image-btn" data-image-index="{{@index}}" data-image-path="{{this}}">X</button>
        
        </div>
        {{/each}}
    </div>
    <input type="hidden" id="removedImages" name="removedImages" value="[]">
</div>

                <!-- Product Images -->
     <div class="form-group mb-3">
    <label for="productImage" class="form-label fw-bold">Upload Images</label>
<input type="file" id="productImage" name="productImage" class="form-control" multiple accept="image/*" >
    <small class="text-muted">Minimum 3 images. Supported formats: jpg, png, gif.</small>
     </div>
    <!-- Image Preview Area -->

    <div  class="form-group mb-3" id="imagePreviewContainer" style="display:none; margin-top: 20px;">
        <h5>Crop Your Image:</h5>
        
        <img id="imagePreview" src="/uploads/re-image/" style="max-width: 100%; display: block;" />
        <button type="button" id="cropImageButton" class="btn btn-primary mt-3">Crop & Save Image</button>
    </div> 



                <!-- Submit Button -->
                <div class="text-center">
                    <button type="submit" id="submitProductButton" name="submitProductButton"class="btn btn-primary px-5 py-2 fw-bold">Update Product</button>
                </div>
            </form>
        </div>









<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener("DOMContentLoaded", function (e) {
    
    console.log("Edit Product Script Loaded Successfully!");

    // Fetch the form and input elements
    const editProductForm = document.getElementById("editproduct");
    const nameField = document.getElementById("productName");
    const descriptionField = document.getElementById("productDesc");
    const brandField = document.getElementById("brand");
    const categoryField = document.getElementById("category");
    const priceField = document.getElementById("regularPrice");
    const quantityField = document.getElementById("quantity");
    const productOfferField = document.getElementById("productOffer")
  

    // Error message elements
    const error1 = document.getElementById("error1");
    const error2 = document.getElementById("error2");
    const error3 = document.getElementById("error3");
    const error4 = document.getElementById("error4");
    const error5 = document.getElementById("error5");
    const error6 = document.getElementById("error6")


    // Helper function to show error messages
    function showError(errorId, message) {
      const errorElement = document.getElementById(errorId);
      errorElement.style.display = message ? "block" : "none";
      errorElement.innerHTML = message;
    }

    // Validation functions
    function nameValidate() {
      const nameValue = nameField.value.trim();
      const namePattern = /^[A-Za-z0-9\s]+$/;
      const numericPattern = /^[0-9]+$/;

      if (nameValue === "") {
        showError("error1", "Please enter a valid name");
        return false;
      } else if (!namePattern.test(nameValue)) {
        showError("error1", "Name can only contain alphabets, numbers, and spaces");
        return false;
      } else if (numericPattern.test(nameValue)) {
        showError("error1", "Name cannot contain only numbers");
        return false;
      } else {
        showError("error1", "");
        return true;
      }
    }

   function descValidate() {
    const descValue = descriptionField.value.trim();
    const descPattern = /^(?=.*[A-Za-z])[A-Za-z0-9\s.,'â€™\-|%]+$/; // Allows letters, numbers (when mixed), and punctuation

    if (descValue === "") {
        showError("error2", "Description is required");
        return false;
    } else if (!descPattern.test(descValue)) {
        showError("error2", "Invalid description format. Must include letters.");
        return false;
    } else {
        showError("error2", ""); // Clear error message
        return true;
    }
}



    function brandValidate() {
      const brandValue = brandField.value.trim();
      const brandPattern = /^(?=.*[A-Za-z])[A-Za-z0-9\s]+$/;

      if (brandValue === "") {
        showError("error3", "Brand name cannot be empty");
        return false;
      } else if (!brandPattern.test(brandValue)) {
        showError("error3", "Brand name can only include letters, digits, and spaces.");
        return false;
      } else {
        showError("error3", "");
        return true;
      }
    }

    function priceValidate() {
    const priceValue = parseFloat(priceField.value.trim());
    if (isNaN(priceValue) || priceValue <= 0) {
        showError("error4", "Price must be a positive number greater than 0.");
        return false;
    } else if (priceValue > 35000) {
        showError("error4", "Price cannot be greater than 35,000.");
        return false;
    } else {
        showError("error4", "");
        return true;
    }
}
function productOfferValidate() {
  const productOfferValue = parseFloat(productOfferField.value.trim());
  
  if (isNaN(productOfferValue) || productOfferValue < 0) {
    showError("error6", "Offer must be a positive number.");
    return false;
  } else if (productOfferValue  > 40) {
    showError("error6", "Offer cannot exceed 40%.");
    return false;
  } else {
    showError("error6", "");
    return true;
  }
}
   function quantityValidate() {
    const quantityValue = parseInt(quantityField.value.trim(), 10);
    if (isNaN(quantityValue) || quantityValue <= 0) {
        showError("error5", "Quantity must be a positive whole number.");
        return false;
    } else if (quantityValue > 100) {
        showError("error5", "Quantity cannot be greater than 200.");
        return false;
    } else {
        showError("error5", "");
        return true;
    }
}


      let cropper;
    const imageInput = document.getElementById('productImage');
    const imagePreviewContainer = document.getElementById('imagePreviewContainer');
    const imagePreview = document.getElementById('imagePreview');
    const cropImageButton = document.getElementById('cropImageButton');
    const submitProductButton = document.querySelector('button[type="submit"]');
    const croppedImagesArray = []; // To store cropped images as Blobs

    // Handle image upload and preview
    imageInput.addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (event) {
                imagePreview.src = event.target.result; // Show selected image
                imagePreviewContainer.style.display = 'block'; // Display cropper container

                // Initialize Cropper.js
                if (cropper) {
                    cropper.destroy(); // Destroy previous instance if exists
                }
                cropper = new Cropper(imagePreview, {
                    aspectRatio: 1, // Adjust ratio as needed
                    viewMode: 1,
                    autoCropArea: 0.8,
                    movable: true,
                    zoomable: true,
                    rotatable: true,
                    scalable: true,
                });
            };
            reader.readAsDataURL(file); // Trigger `onload`
        }
    });

    // Handle crop and save
    cropImageButton.addEventListener('click', function () {
        if (cropper) {
            const croppedCanvas = cropper.getCroppedCanvas();
            croppedCanvas.toBlob(function (blob) {
                if (blob) {
                    croppedImagesArray.push(blob); // Add cropped image Blob to array
                    Swal.fire({
                        icon:'success',
                        title:'Image cropped and Saved',
                        confirmButtonText:'Ok'
                    })
                    console.log('Cropped Images Array:', croppedImagesArray);
                }
            }, 'image/jpeg');
        }
    });


    function removeImage(imageIndex, imagePath) {
        // Find and remove the image element from the DOM
        const imageElement = document.getElementById(`image-${imageIndex}`);
        if (imageElement) {
            imageElement.remove();
        }

        // Add the image path to the hidden input for backend processing
        const removedImagesInput = document.getElementById('removedImages');
        const removedImages = JSON.parse(removedImagesInput.value || '[]');
        removedImages.push(imagePath); // Add the image path to the array
        removedImagesInput.value = JSON.stringify(removedImages);
    }

    // Attach event listener to dynamically generated remove buttons
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-image-btn')) {
            const imageIndex = e.target.dataset.imageIndex;
            const imagePath = e.target.dataset.imagePath;

            // Call the removeImage function
            removeImage(imageIndex, imagePath);
        }
    });

    
    // Form submission event listener
    editProductForm.addEventListener("submit", function (e) {
        e.preventDefault();
      const isNameValid = nameValidate();
      const isDescValid = descValidate();
      const isBrandValid = brandValidate();
      const isPriceValid = priceValidate();
      const isQuantityValid = quantityValidate();
      const isproductOfferValid = productOfferValidate()


      const isFormValid = isNameValid && isDescValid && isBrandValid && isPriceValid && isQuantityValid && isproductOfferValid;

      console.log("Edit Product Form validation result:", isFormValid);

      if (!isFormValid) {
        e.preventDefault();
        console.log("Edit Product Form submission blocked due to validation errors.");
        return;
      }

const formData = new FormData();
        formData.append("productName", nameField.value);
        formData.append("productDesc", descriptionField.value);
        formData.append("category", categoryField.value);
        formData.append("brand", brandField.value);
        formData.append("productOffer",productOfferField.value)
        formData.append("regularPrice", priceField.value);
        formData.append("quantity", quantityField.value);


       

        // Add cropped images to FormData
        croppedImagesArray.forEach((blob) => {
            formData.append('productImage', blob); // Append cropped images under "images"
        });


         // Add removed images to FormData
    const removedImages = document.getElementById('removedImages').value;
    formData.append('removedImages', removedImages);

    // Send the form data via fetch
    fetch(`/admin/editProduct/{{product._id}}`, {
    method: 'POST',
    body: formData,
     })
    .then(response => {
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log("Server response:", data);

        Swal.fire({
            icon: "success",
            title: "Product Updated!",
            text: "The product has been successfully updated.",
            confirmButtonColor: "#3085d6",
            confirmButtonText: "OK",
        }).then(() => {
            if (data.redirectUrl) {
                window.location.href = data.redirectUrl; // Redirect after confirmation
            }
        });
    })
    .catch(error => {
        console.error("Error:", error);
        
        Swal.fire({
            icon: "error",
            title: "Update Failed",
            text: "Failed to save the product. Please try again.",
            confirmButtonColor: "#d33",
            confirmButtonText: "Retry",
        });
    });

    });

    document.addEventListener('click', (e) => {
    if (e.target.classList.contains('remove-image-btn')) {
        const imageToRemove = e.target.dataset.image;
        const removedImagesInput = document.getElementById('removedImages');
        const currentRemovedImages = JSON.parse(removedImagesInput.value) || [];

        // Add the removed image to the list
        currentRemovedImages.push(imageToRemove);
        removedImagesInput.value = JSON.stringify(currentRemovedImages);

        // Remove the image from the UI
        e.target.closest('.position-relative').remove();
    }


    });
  });


</script>



 

    
<style>
    /* General styling for the container */
.card {
    max-width: 600px;
    margin: 30px auto;
    border-radius: 15px;
    overflow: hidden;
    background-color: #ffffff;
    border: none;
}

.card-body {
    padding: 30px;
}

/* Form labels */
.form-label {
    font-size: 16px;
    color: #333333;
    margin-bottom: 5px;
    display: block;
}

/* Input fields */
.form-control {
    border-radius: 10px;
    border: 1px solid #cccccc;
    font-size: 14px;
    padding: 10px 15px;
    color: #555555;
    box-shadow: none;
    transition: all 0.3s ease;
}

.form-control:focus {
    border-color: #007bff;
    box-shadow: 0px 0px 5px rgba(0, 123, 255, 0.5);
}

/* Select dropdown */
.form-select {
    border-radius: 10px;
    border: 1px solid #cccccc;
    font-size: 14px;
    padding: 10px 15px;
    color: #555555;
}
#imagePreviewContainer {
    position: relative;
    margin-top: 20px;
    border: 2px dashed #ccc;
    padding: 10px;
    text-align: center;
}
#imagePreview {
    max-width: 100%;
    height: auto;
    border: 1px solid #ddd;
}
</style>
