<head>
    <!-- Font Awesome CDN -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

</head>


<main class="main">
   <header id="header" class="navbar">
  <div class="logo">chronara</div>
  <nav>
    <ul class="nav-links">
      <li><a href="/user/home">Home</a></li>
      <li><a href="/user/contact">Contact</a></li>
      <li><a href="/user/about">About</a></li>
    </ul>
  </nav>
  {{#if username}}
    <div class="dropdown">
      <a class="sign-in-link" href="#">{{username}}</a>
      <div class="dropdown-content">
        <a href="/user/profile">Profile</a>
        <a href="/user/logout">Logout</a>
      </div>
    </div>
  {{else}}
    <div class="auth-links">
      <a href="/user/login">Login</a> | <a href="/user/usersignup">Signup</a>
    </div>
  {{/if}}
</header>   
        
             <nav class="breadcrumb-nav">
      <ul class="breadcrumb-list">
        <li><a href="/">Home</a></li>
        <li><a href="/category">Shop</a></li>
        <li class="active">add to cart</li> <!-- Current Page -->
      </ul>
    </nav><section class="mt-50 mb-50">
    <div class="container">
        <div class="row">
            <div class="col-9">
                <div class="table-responsive">
                    <table class="table shopping-summery text-center clean">
                        <thead>
                            <tr class="main-heading">
                                <th scope="col">Image</th>
                                <th scope="col">Name</th>
                                <th scope="col">Price</th>
                                <th scope="col">Total</th>
          
                                <th scope="col">Quantity</th>
                                                                {{!-- <th scope="col">hbsnew</th> --}}

                                <th scope="col">Remove</th>
                            </tr>
                        </thead>
                        <tbody>
                           {{#if data}}
    {{#each data}}
    <tr data-product-id='{{this.productId}}'>
            <td class="image product-thumbnail">
                <img src={{this.productImage}} alt="#" />
            </td>
            <td class="product-des product-name">
                <h5 class="product-name">
                    {{this.productName}}
                </h5>
                <p class="font-xs">
                    {{!-- {{this.category}}<br />
                    {{this.brand}}. --}}
                </p>
            </td>
            <td class="price" data-title="Price">
                <span>₹ {{this.salePrice}}/per item</span><br>
                <small class="text-muted text-nowrap">
                    {{!-- ₹{{this.salePrice}} / per item --}}
                </small>
            </td>
            {{!-- <td class="text-center" data-title="Stock">
                <div class="detail-qty border radius m-auto">
                    <div class="quantity-control">
                        <button class="btn btn-sm increment-button">+</button>
                        <input class="quantity-input" value="{{this.quantity}}" style="width: 45px;" type="text" readonly />
                        <button class="btn btn-sm decrement-button">-</button>
                    </div>
                </div>
            </td> --}}
            <td class="subtotal" data-title="Subtotal">
        ₹ {{this.totalPrice}} <!-- Initial total price for this item -->
    </td>

          <td class="text-center" data-title="Stock">
    <div class="detail-qty border radius m-auto">
        <div class="quantity-control">
                        {{!-- <p>product{{this.productId}}</p> --}}

                        

            <button class="btn btn-sm increment-button" onclick="changeQuantity(event, 'increment','{{this.productId}}')">+</button>
            <input class="quantity-input" value="{{this.quantity}}" style="width: 45px;" type="text" readonly />
            <button class="btn btn-sm decrement-button" onclick="changeQuantity(event, 'decrement','{{this.productId}}')">-</button>
        </div>
    </div>
</td>





             <td class="action" data-title="Remove">
        <a class="btn btn-danger" href="javascript:void(0);" onclick="confirmRemove('{{this.productId}}')">
            <i class="fas fa-trash-alt"></i> <!-- Font Awesome trash icon -->
        </a>
    </td>
        </tr>
    {{/each}}
{{else}}
    <tr>
        <td colspan="5" class="text-center">
            <p class="lead mb-4">No item found in Cart</p>
        </td>
    </tr>
{{/if}}

                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-3">
                <div class="border p-md-4 p-30 border-radius cart-totals">
                    <div class="heading_s1 mb-3">
                        <h4>PRICE DETAILS</h4>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <tbody>
                                <tr>
                                    <td class="cart_total_label">Shipping</td>
                                    <td class="cart_total_amount"> <i class="ti-gift mr-5"></i> Free Shipping</td>
                                </tr>
                                <tr>
                                    <td class="cart_total_label">Total</td>
                                    <td class="cart_total_amount">
                                        <span class="font-lg fw-900 text-brand"> ₹{{grandTotal}}||{{totalPrice}}</span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    {{!-- <a href="/checkout?userId={{user._id}}" class="btn"><i class="fi-rs-box-alt mr-10"></i> Proceed To CheckOut</a> --}}
                    <form action="/user/checkOut" method="POST">
    <!-- Include cartId and totalPrice as hidden inputs -->
    <input type="hidden" name="cartId" value={{cartId}}>
    <input type="hidden" name="totalPrice" value={{grandTotal}}>
    <button type="submit"class="btn">Proceed to Checkout</button>
</form>
                </div>
            </div>
        </div>
    </div>
</section>

</main>
{{>userfooter}}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
{{!-- <script>
    function changeQuantity(productId, cartQuantity, count, productPrice, i, productQuantity) {
        const abc = document.getElementById("totalabc").value
        const cartProductQuantityElement = document.querySelector(`#cartProductQuantity${i}`)
        const subtotalElement = document.querySelector(`#subTotal${i}`);
        const totalElements = document.getElementById('total').innerHTML;

        let currentQuantity = parseInt(cartProductQuantityElement.value)
        const currentSubTotal = parseInt(subtotalElement.innerHTML);           

        if (currentQuantity + count > 3) {
            Swal.fire({
                title: 'Limit Exceeded!',
                text: 'You can only add up to 3 items to your cart.',
                icon: 'error',
                timer: 5000
            });
            return;
        }
        
        const newQuantity = currentQuantity + count

        if (count === -1 && newQuantity < 1) {
            return; 
        }

        if(currentSubTotal < currentSubTotal){
            return
        }
        if (count == 1 && newQuantity > productQuantity) {
            Swal.fire({
                title: 'STOCK!',
                text: 'Product is out of stock.',
                icon: 'error',
                timer: 5000
            })
            return
        }

        const newSubtotal = newQuantity * productPrice
        if (count == 1) {
            document.getElementById(`subTotal${i}`).innerHTML = parseInt(subtotalElement.innerHTML) + parseInt(productPrice)
        } else {
            document.getElementById(`subTotal${i}`).innerHTML = parseInt(subtotalElement.innerHTML) - parseInt(productPrice)
        }
        $.ajax({
            url: '/changeQuantity',
            method: 'POST',
            data: {
                productId: productId,
                quantity: newQuantity,
                count: count
            },

            success: (response) => {
                let currentQuantity = parseInt(cartProductQuantityElement.value)
                let currentSubTotal = parseInt(subtotalElement.value)

                document.getElementById(`cartProductQuantity${i}`).value = currentQuantity + count
                document.getElementById(`subTotal${i}`).value = currentSubTotal * count
                
                if (response.count == 1) {
                    document.getElementById(`total`).innerHTML =  parseInt(response.grandTotal)
                } else {
                    document.getElementById(`total`).innerHTML = parseInt(response.grandTotal)
                }

            },
            error: (error) => {
                // Handle error
            }
        })
    }

    function confirmRemove(productId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = `/deleteItem?id=${productId}`;
            }
        })
    }
</script> --}}
{{!-- <script>
   function changeQuantity(event, action) {
    const quantityInput = event.target.closest('.quantity-control').querySelector('.quantity-input');
    let quantity = parseInt(quantityInput.value);

    if (action === 'increment') {
        quantity += 1; // Increase the quantity by 1
    } else if (action === 'decrement' && quantity > 0) {
        quantity -= 1; // Decrease the quantity by 1 (prevents going below 0)
    }

    quantityInput.value = quantity; // Update the value in the input field
}


</script> --}}
{{!-- <script>
function changeQuantity(event, action,productId) {
    // Locate the row element that contains the product
    const rowElement = event.target.closest('tr'); 

    // Get the product ID from a data attribute in the row
    //const productId = rowElement.dataset.productId; 
    console.log(productId)

    // Get the quantity input element and current quantity
    const quantityInput = rowElement.querySelector('.quantity-input');
    let quantity = parseInt(quantityInput.value);

    // Increment or decrement the quantity based on the action
    if (action === 'increment') {
        quantity += 1;
    } else if (action === 'decrement' && quantity > 0) {
        quantity -= 1;
    }

    // Update the quantity input's value in the UI
    quantityInput.value = quantity;

    // Send the updated product ID and quantity to the server
    updateCartItem(productId, quantity);
}

function updateCartItem(productId, quantity) { 
    const data = {
        productId: productId, // Pass the product ID
        quantity: quantity,   // Pass the updated quantity
    };

    // Send an AJAX request to update the product quantity on the backend
    fetch('/user/changeQuantity', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    })
        .then(response => response.json())
        .then(responseData => {
            if (responseData.success) {
                console.log('Cart updated successfully.');
            } else {
                console.error('Failed to update cart:', responseData.message);
            }
        })
        .catch(error => {
            console.error('Error updating cart:', error);
        });
}
</script>  --}}

{{!-- <script>
    // Function to handle quantity change
    function changeQuantity(event, action, productId) {
        // Locate the row element that contains the product
        const rowElement = event.target.closest('tr');

        // Get the quantity input element
        const quantityInput = rowElement.querySelector('.quantity-input');
        let currentQuantity = parseInt(quantityInput.value) || 0; // Ensure it's a number


        

        console.log('Current Quantity:', currentQuantity);

        // Update the quantity based on the action (+ or -)
        if (action === 'increment') {
            currentQuantity += 1;
        } else if (action === 'decrement' && currentQuantity > 0) {
            currentQuantity -= 1;
        }

         if (currentQuantity > 3) {
        Swal.fire({
            title: 'Maximum Quantity Reached!',
            text: "You can only have up to 3 items.",
            icon: 'warning',
            confirmButtonText: 'Okay',
        });
        return; // Stop execution if quantity is greater than 3
    }
    if (currentQuantity === 0) {
        Swal.fire({
            title: 'Item Removed',
            text: "This item has been removed from your cart.",
            icon: 'info',
            confirmButtonText: 'Okay',
        });
        rowElement.remove(); // Remove the row from the table
        updateCartItem(productId, currentQuantity); // Send the updated quantity to the server (quantity 0 means remove item)
        return; // Stop further execution if the quantity is 0
    }

        // Update the input field with the new quantity
        quantityInput.value = currentQuantity;

        // Recalculate the total price for this item
        const productPrice = parseFloat(rowElement.querySelector('.price span').innerText.replace('₹', '')) || 0;
        const totalPrice = (productPrice * currentQuantity).toFixed(2);

        console.log('Updated Total Price:', totalPrice);

        // Update the subtotal in the UI
        const subtotalElement = rowElement.querySelector('.subtotal');
        if (subtotalElement) {
            subtotalElement.innerText = `₹ ${totalPrice}`;
        }

        // Send the updated quantity and productId to the server for persistence
        updateCartItem(productId, currentQuantity);
    }

    // Function to send updated cart data to the server
    async function updateCartItem(productId, quantity) {
        try {
            console.log('Updating cart item:', { productId, quantity });

            const response = await fetch('/user/changeQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, quantity }),
            });

            // Check if the response is OK
            if (!response.ok) {
                throw new Error(`Failed to update cart item: ${response.statusText}`);
            }

            const data = await response.json();

            // Log and handle the response
            if (data.success) {
                console.log('Cart item updated successfully:', data);
            } else {
                console.error('Failed to update quantity:', data.message);
                alert(`Error: ${data.message}`);
            }
        } catch (error) {
            console.error('Error updating cart item:', error);
        }
    }

    // Function to confirm and remove an item
   // Function to confirm and remove an item
function confirmRemove(productId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!',
    }).then((result) => {
        if (result.isConfirmed) {
            // Locate the row that needs to be removed
            const rowToDelete = document.querySelector(`[data-product-id="${productId}"]`);

            if (rowToDelete) {
                // Send the delete request via AJAX before removing the row
                fetch('/user/deleteItem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId }), // Send productId in the body
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success) {
                            Swal.fire('Deleted!', 'Your item has been removed.', 'success');
                            rowToDelete.remove(); // Now remove the row from DOM
                        } else {
                            Swal.fire('Error!', data.message || 'Failed to remove item.', 'error');
                        }
                    })
                    .catch((error) => {
                        console.error('Error deleting item:', error);
                        Swal.fire('Error!', 'There was an error processing your request.', 'error');
                    });
            } else {
                console.error(`Row not found for productId: ${productId}`);
            }
        }
    });
}


</script> --}}


<style>


.breadcrumb-nav {
     padding: 15px 0;
    background-color: #f8f9fa;
    font-size: 14px;
}

.breadcrumb-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-wrap: wrap;
}

.breadcrumb-list li {
    display: inline;
}

.breadcrumb-list li a {
    text-decoration: none;
    color: #007bff; /* Blue color for links */
}

.breadcrumb-list li a:hover {
    text-decoration: underline;
}

.breadcrumb-list li.active {
    color: #6c757d; /* Gray color for the active/current page */
}

.breadcrumb-list li + li::before {
    content: '>';
    margin: 0 10px;
    color: #6c757d;
}
/* General Styles */
body {
    font-family: 'Poppins', sans-serif;
    background-color: #f7f8fa;
    color: #333;
    margin: 0;
    padding: 0;
}

/* Main Section */
section {
    padding: 50px 0;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
}

.table {
    background: #fff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.table thead th {
    background: #abbdcf
    color: #fff;
    font-size: 16px;
    font-weight: bold;
    text-transform: uppercase;
    padding: 15px 10px;
}

.table tbody tr:nth-child(even) {
    background-color: #f9f9f9;
}

.table tbody tr:hover {
    background-color: #ecefff;
    transform: scale(1.01);
    transition: all 0.3s ease-in-out;
}

.table td {
    padding: 15px;
    vertical-align: middle;
}

/* Image Styling */
.product-thumbnail img {
    max-width: 80px;
    border-radius: 8px;
}

/* Quantity Controls */
.quantity-control {
    display: flex;
    align-items: center;
    justify-content: space-around;
    gap: 5px;
}

.quantity-input {
    text-align: center;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
}

.increment-button,
.decrement-button {
    background: #6a11cb;
    color: #fff;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
}

.increment-button:hover,
.decrement-button:hover {
    background: #2575fc;
}

/* Action Button */
.action a {
    color: #ff4d4d;
    font-size: 20px;
    transition: color 0.3s ease-in-out;
}

.action a:hover {
    color: #e60000;
}

/* Cart Totals */
.cart-totals {
    background: #fff;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    padding: 20px;
    text-align: left;
    width: 314px;
}

.cart-totals h4 {
    color: #2575fc;
    margin-bottom: 15px;
}

.cart-totals table {
    width: 100%;
    font-size: 16px;
}

.cart-totals .font-lg {
    color: #6a11cb;
    font-weight: 700;
}

.btn {
    display: block;
    width: 100%;
    background: linear-gradient(90deg, #6a11cb, #2575fc);
    color: #fff;
    text-align: center;
    padding: 10px 15px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    font-weight: bold;
    text-transform: uppercase;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
}

.btn:hover {
    background: #2575fc;
    color: #fff;
    transform: translateY(-2px);
}

/* Responsive Styling */
@media (max-width: 768px) {
    .table thead {
        display: none;
    }

    .table tbody tr {
        display: flex;
        flex-direction: column;
        gap: 15px;
        padding: 15px;
        background-color: #fff;
        border-radius: 10px;
        margin-bottom: 15px;
    }

    .table tbody td {
        text-align: left;
    }

    .cart-totals {
        margin-top: 30px;
        
    }
}
      .navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 40px;
    background-color: #f8f9fa;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.logo {
    font-size: 24px;
    font-weight: bold;
}

.nav-links {
    list-style: none;
    display: flex;
    gap: 20px;
}

.nav-links a {
    text-decoration: none;
    color: #333;
    font-weight: 500;
}

.auth-links a {
    text-decoration: none;
    color: #333;
    font-weight: 500;
}  
 .fas.fa-user-circle {
    margin-right: 8px; /* Space between icon and username */
    font-size: 20px;   /* Icon size */
    color: #333;       /* Icon color */
}
.fas.fa-shopping-cart {
    margin-right: 8px; /* Space between icon and username */
    font-size: 20px;   /* Icon size */
    color: #333;       /* Icon color */
}
.dropdown{
    position: relative;
    display: inline-block;
    
  } 
  .dropdown-content{
    display: none;
    position: absolute;
    background-color: white;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1000;
    right: 0;
  }
  .dropdown-content a{
    color: black;
    padding: 12px 16px ;
    text-decoration: none;
    display: block;
    width: 100%;
    }
    .dropdown-content a:hover{
        background-color: #f1f1f1;
    }
    .dropdown:hover .dropdown-content{
        display: block;
    }
    #header{
        position: relative;
        z-index: 500;
    }
     .shopping-icon a{
        text-decoration: none;
    }
    

 
</style>