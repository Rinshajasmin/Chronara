{{>userHeadernw}}


<div class="container-fluid" style="display: flex;">
    <div class="sidebar">
    {{>sidebar}}
    </div>

<div class="container">
  <!-- Title -->
  <div class="d-flex justify-content-between align-items-center py-3">
  </div>

  <!-- Main content -->
  <div class="row">
    <div class="col-lg-8">
      <!-- Details -->
      <div class="card mb-4">
        <div class="card-body">
          <div class="mb-3 d-flex justify-content-between">
            <div>
            <span class="me-3">{{formatDate order.createdOn "DD MMMM YYYY"}}</span>
            <span class="badge rounded-pill 
                {{#if (eq order.status 'Pending')}} bg-warning 
                {{else if (eq order.status 'Shipped')}} bg-primary 
                {{else if (eq order.status 'Delivered')}} bg-success 
                {{else if (or (eq order.status 'Cancelled') (eq order.status 'Returned'))}} bg-danger 
                {{else}} bg-info {{/if}}">
                {{order.status}}
            </span>
            </div>
            <div class="d-flex">
                
              <div class="dropdown">
                <button class="btn btn-link p-0 text-muted" type="button" data-bs-toggle="dropdown">
                  <i class="bi bi-three-dots-vertical"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                  <li><a class="dropdown-item" href="#"><i class="bi bi-pencil"></i> Edit</a></li>
                  <li><a class="dropdown-item" href="#"><i class="bi bi-printer"></i> Print</a></li>
                </ul>
              </div>
            </div>
          </div>
          <table class="table table-borderless">
           <thead>
                    <tr>
                        <th>Product</th>
                        {{!-- <th>SKU</th> --}}
                        <th>Quantity</th>
                        <th>Actual Price</th>
                        <th> Offer Price</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each order.orderItems}}
                    <tr>
                       
                        <td class="product-image">
                        <img src="{{this.product.productImage.[0]}}" alt="{{this.product.productName}}">
                        <span>{{this.product.productName}}</span>
                    </td>
                        <td>{{this.quantity}}</td>
                        <td>{{this.product.regularPrice}}</td>
                        <td>₹{{this.price }}</td>

                        <td>₹{{this.totalPrice}}</td>
                    </tr>
                    {{/each}}

                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="4">Subtotal:</td>
                        <td>₹{{ formatPrice order.totalOrderPrice}}</td>
                    </tr>

                    <tr>
                        <td colspan="4">Coupon Discount:</td>
                        <td>{{couponDiscount}}</td>
                    </tr>

                    <tr>
                        <td colspan="4">You Saved:</td>
                        <td>{{ formatPrice order.discounts}}</td>
                    </tr>


                    <tr>
                        <td colspan="4">Shipping Rate:</td>
                        <td>₹50.00</td>
                    </tr>
                    <tr>
                        <td colspan="4"><strong>Total:</strong></td>
                        <td><strong>₹{{formatPrice order.finalAmount}}</strong></td>
                    </tr>
                </tfoot>
          </table>
        </div>
      </div>
      <!-- Payment -->
      <div class="card mb-4">
        <div class="card-body">
          <div class="row">
            <div class="col-lg-6">
              <h3 class="h6">Payment Method</h3>
                <span class="me-3">#{{order.orderId}}</span>

              <p>{{order.paymentMethod}} <br>
              Total:₹ {{formatPrice order.finalAmount}} 
            <span class="badge rounded-pill 
                {{#if (eq order.paymentStatus 'Pending')}} bg-warning 
                {{else if (eq order.paymentStatus 'Paid')}} bg-success 
                {{else if (eq order.paymentStatus 'Awaiting Payment')}} bg-danger 
                {{else}} bg-info {{/if}}">
                {{order.paymentStatus}}
            </span>
            {{#if (and (eq order.paymentStatus "Awaiting Payment") (neq order.status "Returned") (neq order.status "Cancelled"))}}
    <form id="paymentForm" method="POST">
       <div class="payment-dropdown-container">
    <label for="paymentMethod" class="form-label">Pay Now:</label>
    <div class="custom-dropdown">
        <select name="paymentMethod" id="paymentMethod" class="form-select" required>
            <option value="" disabled selected>Select a payment method</option>
            <option value="Wallet">Wallet</option>
            <option value="Razorpay">Razorpay</option>
            <option value="Cash on Delivery">Cash on Delivery</option>
        </select>
    </div>
    <button class="btn btn-primary mt-2 w-100" id="proceedButton" style="display: none;">
        <i class="fa-solid fa-arrow-right"></i> Proceed
    </button>
</div>
    </form>
{{/if}}

            <div class="status-container">
    {{#if (or (eq order.status "Pending") (eq order.status "Shipped"))}}
    <div class="status">
        <form id="cancelOrderForm" method="POST" action="/user/orderDetails/{{order._id}}">
            <div class="form-group">
                <label for="cancellationReason" class="form-label">Cancellation Reason</label>
                <textarea id="cancellationReason" name="cancellationReason" class="form-control custom-textarea"
                    placeholder="reason"></textarea>
            </div>
            <button type="button" class="btn btn-danger custom-btn" id="cancelOrderBtn">Cancel Order</button>
        </form>
    </div>
    {{/if}}

    {{#if (eq order.status "Delivered")}}
    <div class="status">
        <form id="returnOrderForm" method="POST" action="/user/returnOrder/{{order._id}}">
            <div class="form-group">
                <label for="returnReason" class="form-label">Return Reason</label>
                <textarea id="returnReason" name="returnReason" class="form-control custom-textarea"
                    placeholder="Enter reason for return"></textarea>
            </div>
            <button type="button" class="btn btn-primary custom-btn" id="returnOrderBtn">Return Order</button>
        </form>
    </div>
    {{/if}}
</div>


              
              </p>
            </div>
            <div class="col-lg-6">
              <h3 class="h6">Billing address</h3>
              <address>
                <strong>{{addressDetails.name}}</strong><br>
                {{addressDetails.state}} {{addressDetails.city}}, {{addressDetails.landMark}}<br>
                +91  {{addressDetails.phone}}, {{addressDetails.pincode}}<br>
                +91 {{addressDetails.altPhone}}
              </address>
               {{#if (and (eq order.paymentStatus "Paid") (neq order.status "Cancelled"))}}
            <button id="downloadInvoiceButton" class="btn btn-primary"> <i class="fa-solid fa-download"></i>Invoice</button>
            {{/if}}
             
            </div>
             
          </div>
        </div>
      </div>
    </div>
    <div class="col-lg-4">
      <!-- Customer Notes -->
      <div class="card mb-4">
        <div class="card-body">
          <h3 class="h6">Customer Info</h3>
           <strong> {{order.address.username}}</strong><br>
                    {{order.address.email}},+91 {{order.address.phone}}        </div>
      </div>
      <div class="card mb-4">
        <!-- Shipping information -->
        <div class="card-body">
          <h3 class="h6">Shipping Information</h3>
          <hr>
          <h3 class="h6">Address</h3>
          <address>
              <strong>{{addressDetails.name}}</strong><br>
                {{addressDetails.state}} {{addressDetails.city}}, {{addressDetails.landMark}}<br>
                +91  {{addressDetails.phone}}, {{addressDetails.pincode}}<br>
                +91 {{addressDetails.altPhone}}
          </address>
        </div>
      </div>
    </div>
  </div>
</div>
  </div>
  {{>userfooter}}


  <style>
    body{
    background:#eee;
}
.card {
    box-shadow: 0 20px 27px 0 rgb(0 0 0 / 5%);
}
.card {
    position: relative;
    display: flex;
    flex-direction: column;
    min-width: 0;
    word-wrap: break-word;
    background-color: #fff;
    background-clip: border-box;
    border: 0 solid rgba(0,0,0,.125);
    border-radius: 1rem;
}
.text-reset {
    --bs-text-opacity: 1;
    color: inherit!important;
}
 .product-image img {
            width: 50px;
            height: 50px;
            border-radius: 4px;
        }
a {
    color: #5465ff;
    text-decoration: none;
}
/* Container Styling */
.status-container {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-top: 15px;
}

/* Textarea Styling */
.custom-textarea {
    width: 100%;
    height: 60px;
    border-radius: 8px;
    border: 1px solid #ced4da;
    padding: 10px;
    resize: none;
    font-size: 14px;
    transition: 0.3s ease-in-out;
}

.custom-textarea:focus {
    border-color: #007bff;
    box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);
}

/* Button Styling */
.custom-btn {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    font-weight: bold;
    border-radius: 8px;
    margin-top: 10px;
    transition: all 0.3s ease;
}

.custom-btn:hover {
    transform: scale(1.05);
    opacity: 0.9;
}
.payment-dropdown-container {
    margin-top: 15px;
    max-width: 350px;
}

.custom-dropdown select {
    padding: 10px;
    font-size: 16px;
    border: 2px solid #007bff;
    border-radius: 8px;
    background-color: #f8f9fa;
    transition: border-color 0.3s ease;
}

.custom-dropdown select:focus {
    border-color: #0056b3;
    outline: none;
    box-shadow: 0 0 5px rgba(0, 91, 187, 0.5);
}

#proceedButton {
    font-weight: bold;
    border-radius: 8px;
    transition: background 0.3s ease;
}

#proceedButton:hover {
    background: #0056b3;
}


  </style>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const cancelOrderBtn = document.getElementById('cancelOrderBtn');
    if (cancelOrderBtn) { // Check if the cancel button exists
        cancelOrderBtn.addEventListener('click', function (event) {
            const cancellationReason = document.getElementById('cancellationReason').value.trim()

            // Check if the cancellation reason is provided
            if (!cancellationReason) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Please provide a reason for cancellation.',
                    icon: 'error',
                    confirmButtonColor: '#d33'
                });
                return; // Don't proceed if no reason is entered
            }

            // Confirm cancellation with SweetAlert
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Update the form to include status and cancellationReason fields
                    const form = document.getElementById('cancelOrderForm');

                    // Create and append hidden status input field
                    const statusInput = document.createElement('input');
                    statusInput.type = 'hidden';
                    statusInput.name = 'status';
                    statusInput.value = 'Cancelled';
                    form.appendChild(statusInput);

                    // Create and append hidden cancellationReason input field
                    const reasonInput = document.createElement('input');
                    reasonInput.type = 'hidden';
                    reasonInput.name = 'cancellationReason';
                    reasonInput.value = cancellationReason;
                    form.appendChild(reasonInput);

                    // Submit the form
                    form.submit();

                    // Show success message
                    Swal.fire(
                        'Cancelled!',
                        'The order has been cancelled.',
                        'success'
                    );
                }
            });
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Get the return order button element
        const returnOrderBtn = document.getElementById('returnOrderBtn');
        if (returnOrderBtn) { // Check if the button exists
            returnOrderBtn.addEventListener('click', function (event) {
                const returnReason = document.getElementById('returnReason').value.trim();

                // Check if the return reason is provided
                if (!returnReason) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Please provide a reason for returning the order.',
                        icon: 'error',
                        confirmButtonColor: '#d33'
                    });
                    return; // Don't proceed if no reason is entered
                }

                // Confirm return with SweetAlert
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You want to return this order!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, return it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Update the form to include status and returnReason fields
                        const form = document.getElementById('returnOrderForm');

                        if (form) { // Check if the form exists
                            // Create and append hidden status input field
                            const statusInput = document.createElement('input');
                            statusInput.type = 'hidden';
                            statusInput.name = 'status';
                            statusInput.value = 'Returned';
                            form.appendChild(statusInput);

                            // Create and append hidden returnReason input field
                            const reasonInput = document.createElement('input');
                            reasonInput.type = 'hidden';
                            reasonInput.name = 'returnReason';
                            reasonInput.value = returnReason;
                            form.appendChild(reasonInput);

                            // Submit the form
                            form.submit();

                            // Show success message
                            Swal.fire(
                                'Returned!',
                                'The order has been marked as returned.',
                                'success'
                            );
                        } else {
                            console.error('Return form not found.');
                        }
                    }
                });
            });
        } else {
            console.error('Return order button not found.');
        }
    });



</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('paymentForm');
        const orderData = JSON.parse('{{{json order}}}');


        const paymentMethodDropdown = document.getElementById('paymentMethod');
        const proceedButton = document.getElementById('proceedButton');

        const finalTotal = parseFloat(orderData.finalAmount) || 0;
        const orderId = orderData._id;
        // Listen for changes in the dropdown
        paymentMethodDropdown.addEventListener('change', () => {
            const selectedMethod = paymentMethodDropdown.value;

            // Check for "Cash on Delivery" restrictions
            if (selectedMethod === 'Cash on Delivery' && finalTotal > 1000) {
                Swal.fire({
                    title: '',
                    text: "COD Unavailable for orders over 1000!!",
                    icon: 'warning',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'Ok',
                });
                paymentMethodDropdown.value = ''; // Reset the dropdown
                proceedButton.style.display = 'none'; // Hide the button
                return; // Stop further execution
            }


            // Show the "Proceed" button if a valid payment method is selected
            if (selectedMethod) {
                proceedButton.style.display = 'inline-block';
            } else {
                proceedButton.style.display = 'none';
            }
        });

        // Handle form submission
        form.addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent default form submission

            const selectedMethod = paymentMethodDropdown.value;
            if (selectedMethod === 'Razorpay') {
                const orderId = "{{order._id}}";  // Use your order ID
                const amount = "{{order.finalAmount}}";  // Use your order amount

                // Redirect to backend endpoint to load Razorpay page
                window.location.href = `/user/getPaymentPage?orderId=${orderId}&amount=${amount}`;
            }

            if (!selectedMethod) {
                Swal.fire({
                    title: 'Error',
                    text: 'Please select a payment method.',
                    icon: 'error',
                    confirmButtonText: 'Ok',
                });
                return;
            }

            try {
                // Send the form data to the backend using fetch
                const response = await fetch(`/user/completeFailedPayment/${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ paymentMethod: selectedMethod }),
                });

                const result = await response.json();

                // Display SweetAlert based on the response
                if (result.success) {
                    Swal.fire({
                        title: 'Payment Successful',
                        text: result.message,
                        icon: 'success',
                        confirmButtonText: 'Ok',
                    }).then(() => {
                        // Redirect to orders page
                        window.location.href = '/user/getUserOrders';
                    });
                } else {
                    Swal.fire({
                        title: 'Payment Failed',
                        text: result.message,
                        icon: 'error',
                        confirmButtonText: 'Try Again',
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'Something went wrong. Please try again later.',
                    icon: 'error',
                    confirmButtonText: 'Ok',
                });
            }
        });
    });
</script>
<script>
    document.getElementById("downloadInvoiceButton").addEventListener("click", downloadInvoice);

    function downloadInvoice() {
        const orderId = '{{order._id}}'

        fetch(`/user/invoiceDownload/${orderId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        })

            .then(response => response.blob())  // Assuming the backend sends the invoice as a blob (PDF)
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `invoice_${orderId}.pdf`;  // Name the file as you wish
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => {
                console.error('Error generating invoice:', error);
            });
    }

</script>

