{{>userHeadernw}}
<div class="sidebar-container" style="display: flex;">
{{>sidebar}}
<div class="container mt-4">
   <form id="addressForm" method="POST" action="/user/editAddress?id={{address._id}}"
 class="border-0 p-3">
       <div class="row mb-50">
           <div class="form-group col-md-4">
               <label for="addressType">Address Type:</label>
               <input type="text" class="form-control border-3" value="{{ address.addressType}}" id="addressType" name="addressType" required>
           </div>
           <div class="form-group col-md-4">
               <label for="name">Name:</label>
               <input type="text" class="form-control border-3" value="{{address.name }}" id="name" name="name" required>
           </div>
           <div class="form-group col-md-4">
               <label for="city">City:</label>
               <input type="text" class="form-control border-3" id="city" value="{{address.city }}" name="city" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="landMark">Landmark:</label>
               <input type="text" class="form-control border-3" value="{{address.landMark}} " id="landMark" name="landMark" required>
           </div>
           <div class="form-group col-md-4">
               <label for="state">State:</label>
               <input type="text" class="form-control border-3" value="{{address.state }}" id="state" name="state" required>
           </div>
           <div class="form-group col-md-4">
               <label for="pincode">Pincode:</label>
               <input type="number" class="form-control border-3" value="{{address.pincode}}" id="pincode" name="pincode" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="phone">Phone:</label>
               <input type="number" class="form-control border-3" id="phone" value="{{address.phone}}" name="phone" required>
           </div>
           <div class="form-group col-md-4">
               <label for="altPhone">Alternate Phone:</label>
               <input type="number" class="form-control border-3" id="altPhone" value="{{address.altPhone}}" name="altPhone" required>
           </div>
       </div>
       <button type="submit" id="submitButton" class="btn btn-primary">Update</button>
   </form>
</div>
</div>
{{>userfooter}}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
   document.getElementById('submitButton').addEventListener('click', function (event) {
       if (!validateForm()) {
           event.preventDefault();
       }
   });


  function validateForm() {
    let isValid = true;
    const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
    requiredFields.forEach(function (field) {
        const input = document.getElementById(field);
        const inputValue = input.value.trim();
        const errorElement = document.getElementById(field + '-error');

        if (inputValue === "") {
            if (!errorElement) {
                const errorMessage = "This field is required.";
                const errorDiv = document.createElement('div');
                errorDiv.className = "text-danger";
                errorDiv.textContent = errorMessage;
                errorDiv.id = field + '-error';
                input.parentNode.appendChild(errorDiv);
            }
            isValid = false;
        } else {
            if (errorElement) {
                errorElement.remove();
            }
        }
    });

    const name = document.getElementById('name').value.trim();
    const city = document.getElementById('city').value.trim();
    const landMark = document.getElementById('landMark').value.trim();
    const state = document.getElementById('state').value.trim();
    const pincode = document.getElementById('pincode').value.trim();
    const phone = document.getElementById('phone').value.trim();
    const altPhone = document.getElementById('altPhone').value.trim();

    const namePattern = /^[A-Za-z]+(?:\s[A-Za-z]+)*$/; // Names should be alphabets with optional spaces between words.
    const pincodePattern = /^[1-9]\d{5}$/; // Pincode should be 6 digits and not start with 0.
const phonePattern = /^[1-9](?!.*000000000)[0-9]{9}$/; // Phone with at most 8 zeros

    if (!namePattern.test(name)) {
        Swal.fire({
            title: 'Error',
            text: 'Name should only contain alphabets and spaces.',
            icon: 'error'
        });
        isValid = false;
    }
    if (!namePattern.test(city)) {
        Swal.fire({
            title: 'Error',
            text: 'City should only contain alphabets.',
            icon: 'error'
        });
        isValid = false;
    }
    if (!namePattern.test(landMark)) {
        Swal.fire({
            title: 'Error',
            text: 'Landmark should only contain alphabets.',
            icon: 'error'
        });
        isValid = false;
    }
    if (!namePattern.test(state)) {
        Swal.fire({
            title: 'Error',
            text: 'State should only contain alphabets.',
            icon: 'error'
        });
        isValid = false;
    }
    if (!pincodePattern.test(pincode)) {
        Swal.fire({
            title: 'Error',
            text: 'Pincode should be a valid 6-digit number starting with a non-zero digit.',
            icon: 'error'
        });
        isValid = false;
    }
    if (!phonePattern.test(phone)) {
        Swal.fire({
            title: 'Error',
            text: 'Phone number should be a valid 10-digit number not starting with zero.',
            icon: 'error'
        });
        isValid = false;
    }
    if (!phonePattern.test(altPhone)) {
        Swal.fire({
            title: 'Error',
            text: 'Alternate phone number should be a valid 10-digit number not starting with zero.',
            icon: 'error'
        });
        isValid = false;
    }
    if (phone === altPhone) {
        Swal.fire({
            title: 'Error',
            text: 'Phone number and alternate phone number should be different.',
            icon: 'error'
        });
        isValid = false;
    }
    return isValid;
}


</script>
