
{{!-- {{>profilesidebar}} --}}
<head>
    <!-- Font Awesome CDN -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

</head>

<main class="main">
  <header id="header" class="navbar">
        <div class="logo">chronara</div>
        <nav>
            <ul class="nav-links">
                <li><a href="/user/home">Home</a></li>
                <li><a href="/user/contact">Contact</a></li>
                <li><a href="/user/about">About</a></li>

                {{!-- <li><a href="/user/cart/?id={{_id}}" >Cart</a></li> --}}
            </ul>
        </nav>
        
         {{#if username}}
         <div class="shopping-icon">
              <a href="/user/cart/?id={{cartId}}" class="cart-icon">
              
                <i class="fas fa-shopping-cart"></i> <!-- Cart icon -->
              </a>
        <div class="dropdown">
          
          <a class="sign-in-link" href="#">  
            
                   <i class="fas fa-user-circle"></i> <!-- Profile icon -->


            {{username}}
          </a>
          <div class="dropdown-content">
            <a  href="/user/userProfile">Profile</a>
            <a  href="/user/logout">Logout</a>
          </div>
        </div>
        </div>
        
        {{else}}
        <div class="auth-links">
            <a href="/user/login">Login</a> | <a href="/user/usersignup">Signup</a>
        </div>
       {{/if}}  
 
    </header>     

             <nav class="breadcrumb-nav">
      <ul class="breadcrumb-list">
        <li><a href="/user/home">Home</a></li>
        <li><a href="/user/shop">Shop</a></li>
        <li class="active">add to cart</li> <!-- Current Page -->
      </ul>
    </nav>
    <section class="mt-50 mb-50">
    <div class="container">
        <div class="row">
            <div class="col-9">
                {{#if data}}
                <div class="table-responsive">
                    <table class="table shopping-summery text-center clean">
                        <thead>
                            <tr class="main-heading">
                                <th scope="col">Image</th>
                                <th scope="col">Name</th>
                                <th scope="col">Price</th>
                                <th scope="col">Total</th>
          
                                <th scope="col">Quantity</th>
                                                                {{!-- <th scope="col">hbsnew</th> --}}

                                <th scope="col">Remove</th>
                            </tr>
                        </thead>
                        <tbody>
                           {{!-- {{#if data}} --}}
                           {{#each data}}
<tr class="cart-item-row" data-product-id="{{this.productId}}" data-regular-price="{{this.regularPrice}}" data-quantity="{{this.quantity}}">
    <td class="image product-thumbnail">
        <img src="{{this.productImage}}" alt="#" />
    </td>
    <td class="product-des product-name">
        <h5 class="product-name">
            {{this.productName}}
        </h5>
        <p class="font-xs">
            {{!-- {{this.category}}<br />
            {{this.brand}}. --}}
        </p>
    </td>
    <td class="price" data-title="Price">
        {{#if totalOffer}}
        <span>₹ {{this.salePrice}}/per item</span><br>
        <small class="text-muted text-nowrap">
            <del style="color: #ea5353;">₹{{this.regularPrice}}</del> <span class="offer-discount">
                {{this.totalOffer}}%
                <i class="fas fa-arrow-down"></i>
            </span>
        </small>
        {{else}}
        <span>₹ {{this.regularPrice}}/per item</span><br>
        {{/if}}
    </td>
    <td class="subtotal" data-title="Subtotal">
        ₹ {{this.totalPrice}} <!-- Initial total price for this item -->
    </td>
    <td class="text-center" data-title="Stock">
        <div class="detail-qty border radius m-auto">
            <div class="quantity-control">
                <button class="btn btn-sm increment-button" onclick="changeQuantity(event, 'increment', '{{this.productId}}')">+</button>
                <input class="quantity-input" value="{{this.quantity}}" style="width: 45px;" type="text" readonly />
                <button class="btn btn-sm decrement-button" onclick="changeQuantity(event, 'decrement', '{{this.productId}}')">-</button>
            </div>
        </div>
    </td>
    <td class="action" data-title="Remove">
        <a class="btn-danger" href="javascript:void(0);" onclick="confirmRemove('{{this.productId}}')">
           <i class="fa-solid fa-xmark"></i> <!-- Font Awesome trash icon -->
        </a> 
    </td>
</tr>
{{/each}}

                           </tbody>
                    </table>
                    {{else}}
  

        <div colspan="5" class="text-center empty-cart-message">
            <p class="lead mb-4">Your Cart is Empty!!</p>
        </div>

{{/if}}

                       
                </div>
            </div>
            {{#if data}}
            <div class="col-3">
                <div class="border p-md-4 p-30 border-radius cart-totals">
                    <div class="heading_s1 mb-3">
                        <h4>PRICE DETAILS</h4>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <tbody>
                                <tr id="actualPriceRow">
                                    <td class="cart_total_label">Price({{netQuantity}} Items)</td>
                                    <td class="actualCartTotal">{{actualCartTotal}}</td>
                                </tr>
                                <tr id="offerRow">
                                    <td>
                                        Saved(offers)
                                    </td>
                                    <td class="actualCartOfferDiscount">{{actualCartOfferDiscount}}</td>
                                </tr>
                                
                                <tr id="discountRow" style="display: none;">
                                    <td >Coupon Discount</td>
                                    <td class="discountValue">₹0</td>
                                </tr>


                                <tr>
                                    <td class="cart_total_label">Shipping</td>
                                    <td class="cart_total_amount"> <i class="ti-gift mr-5"></i> Free Shipping</td>
                                </tr>
                                
                                <tr>
                                    <td class="cart_total_label">Total</td>
                                    <td class="cart_total_amount">
                                        <span id="cartTotal" class="font-lg fw-900 text-brand"> ₹{{grandTotal}}</span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    {{!-- <a href="/checkout?userId={{user._id}}" class="btn"><i class="fi-rs-box-alt mr-10"></i> Proceed To CheckOut</a> --}}
                    <form action="/user/checkOut" method="POST">
    <!-- Include cartId and totalPrice as hidden inputs -->
    <input type="hidden" name="cartId" value={{cartId}}>
    <input type="hidden" name="totalPrice" value={{grandTotal}}>
    <button type="submit"class="btn">Proceed to Checkout</button>
</form>
                </div>
                <div class="coupon-section mt-3">

     <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Coupon Code</h5>
        <a 
            href="#" 
            class="text-decoration-none" 
            data-bs-toggle="collapse" 
            data-bs-target="#availableCoupons" 
            aria-expanded="false" 
            aria-controls="availableCoupons"
            onClick="fetchCoupons()"
        >
            View All
        </a>
    </div>

    <div class="collapse mt-2" id="availableCoupons">
        <div class="card card-body">
            <ul class="couponList">
                 
            </ul>
        </div>
    </div>
    
    <form id="applyCouponForm" action="/user/applyCoupon" method="POST">
        <div class="input-group">
            <input
                type="text"
                name="couponCode"
                class="form-control"
                placeholder="Coupon Code"
                required
            />
 <button 
            id="applyCouponButton" 
            type="submit" 
            class="btn btn-primary" 
            data-coupon-applied="false"
        >
            Apply Coupon
        </button>        </div>
    </form>
</div>



           

            
        </div>
        {{/if}}
    </div>
</section>

</main>
{{>userfooter}}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
{{!-- <script>
function fetchCoupons() {
    fetch('/user/viewAllCoupons')
        .then(response => response.json())
        .then(data => {
            const couponList = document.querySelector('.couponList');
            couponList.innerHTML = ''; // Clear any previous data

            if (data.success && data.data.length > 0) {
                data.data.forEach(coupon => {
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `<strong>${coupon.name}</strong> - ₹${coupon.offerPrice} off on order above ₹${coupon.minimumPrice}`;

                    couponList.appendChild(listItem);
                });
            } else {
                couponList.innerHTML = '<li>No active coupons available.</li>';
            }
        })
        .catch(error => {
            console.error('Error fetching coupons:', error);
        });
}
</script> --}}
<script>
 
function copyCouponCode(event) {
    const couponCode = event.target.textContent.trim(); // Use the name field as the coupon code

    if (couponCode) {
        // Create a temporary input field to hold the coupon code and copy it
        const tempInput = document.createElement('input');
        document.body.appendChild(tempInput);
        tempInput.value = couponCode;
        tempInput.select();
        document.execCommand('copy');
        document.body.removeChild(tempInput);

        // Display copied message
        const copiedMessage = event.target.nextElementSibling;
        copiedMessage.style.display = 'inline'; // Show the "Copied" message
        setTimeout(() => {
            copiedMessage.style.display = 'none'; // Hide it after 2 seconds
        }, 2000);
    }
}

// Fetch and render coupons in the list
function fetchCoupons() {
    fetch('/user/viewAllCoupons')
        .then(response => response.json())
        .then(data => {
            const couponList = document.querySelector('.couponList');
            couponList.innerHTML = ''; // Clear any previous data

            if (data.success && data.data.length > 0) {
                data.data.forEach(coupon => {
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `
                        <strong>${coupon.name}</strong> - ₹${coupon.offerPrice} off on order above ₹${coupon.minimumPrice}
<span class="copied-message" style="display: none; background-color: black; color: white; padding: 5px 10px; border-radius: 5px; margin-left: 10px;">Copied</span>
                    `;
                    // Attach the double-click event to copy the coupon code
                    listItem.addEventListener('dblclick', copyCouponCode);
                    couponList.appendChild(listItem);
                });
            } else {
                couponList.innerHTML = '<li>No active coupons available.</li>';
            }
        })
        .catch(error => {
            console.error('Error fetching coupons:', error);
        });
}
</script>



{{!-- <script>
document.getElementById('applyCouponForm').addEventListener('submit', async (event) => {
    event.preventDefault();

    const couponCode = document.querySelector('input[name="couponCode"]').value;

    try {
        const response = await fetch('/user/applyCoupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ couponCode }),
        });

        const result = await response.json();

        if (result.success) {
            // Update cart details dynamically
            document.getElementById('cartTotal').textContent = `₹${result.cartDetails.grandTotal}`;
            alert(result.message);
        } else {
            alert(result.message);
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
        alert('An error occurred.');
    }
});
</script> --}}
<script>

document.getElementById('applyCouponForm').addEventListener('submit', async (event) => {
    event.preventDefault();

    const couponCodeInput = document.querySelector('input[name="couponCode"]');
    const applyButton = document.querySelector('#applyCouponButton'); // Add ID to your button
    const isCouponApplied = applyButton.getAttribute('data-coupon-applied') === 'true';

        const cartId = '{{cartId}}';  // If cartId is available in the template


    try {
        const url = isCouponApplied ? '/user/removeCoupon' : '/user/applyCoupon';
        const method = isCouponApplied ? 'POST' : 'POST';

        const response = await fetch(url, {
            method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ couponCode: couponCodeInput.value,  cartId:cartId }),
        });

        const result = await response.json();

        if (result.success) {
            // Update cart details dynamically
            document.getElementById('cartTotal').textContent = `₹${result.cartDetails.grandTotal}`;
            // Update discount row visibility
            const discountRow = document.getElementById('discountRow');
            if (result.cartDetails.discount) {
                discountRow.style.display = ''; // Show the row
                discountRow.querySelector('.discountValue').textContent = `₹${result.cartDetails.discount}`;
            } else {
                discountRow.style.display = 'none'; // Hide the row
            }
            applyButton.setAttribute('data-coupon-applied', !isCouponApplied);
            applyButton.textContent = isCouponApplied ? 'Apply Coupon' : 'Remove Coupon';

            // Display success message
            Swal.fire({
                icon:'success',
                title:'success!',
                text:result.message,
                confirmButtonText:'ok',
                timer:3000
            })
        } else {
            Swal.fire({
                icon:'Error',
                title:'Oops..',
                text:result.message,
                confirmButtonText:'Try Again',
                timer:3000
            })
        }
    } catch (error) {
        console.error('Error applying/removing coupon:', error);
         Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred. Please try again later.',
            confirmButtonText: 'OK',
        });    }
});
</script>
<script>
  function checkCartStatus() {
    const tableBody = document.querySelector('.table tbody'); // Ensure this is the tbody for cart items
    const tableElement = document.querySelector('.table');
    const cartTotalElement = document.querySelector('.cart-totals');
    const couponSection = document.querySelector('.coupon-section');
    const emptyCartMessage = document.querySelector('.empty-cart-message');

    if (tableBody && tableBody.children.length === 0) {
        // Hide the table and cart sections
        if (tableElement) {
            tableElement.style.display = 'none';
        }
        if (cartTotalElement) {
            cartTotalElement.style.display = 'none';
        }
        if (couponSection) {
            couponSection.style.display = 'none';
        }

        // If the empty message doesn't exist, add it
        if (!emptyCartMessage) {
            const emptyMessageHTML = `
                <div class="text-center empty-cart-message">
<p class="lead" style="height:88px;">Your Cart is Empty!!</p>
                </div>
            `;
            // Append the empty message to the container
            const cartContainer = document.querySelector('.container'); // Adjust the selector to match your cart's structure
            if (cartContainer) {
                cartContainer.innerHTML = emptyMessageHTML;
            }
        }
    } else {
        // Show the table and cart sections
        if (tableElement) {
            tableElement.style.display = '';
        }
        if (cartTotalElement) {
            cartTotalElement.style.display = '';
        }
        if (couponSection) {
            couponSection.style.display = '';
        }

        // Remove the empty cart message if it exists
        if (emptyCartMessage) {
            emptyCartMessage.remove();
        }
    }
}


  
</script>






{{!-- <script>
    function changeQuantity(productId, cartQuantity, count, productPrice, i, productQuantity) {
        const abc = document.getElementById("totalabc").value
        const cartProductQuantityElement = document.querySelector(`#cartProductQuantity${i}`)
        const subtotalElement = document.querySelector(`#subTotal${i}`);
        const totalElements = document.getElementById('total').innerHTML;

        let currentQuantity = parseInt(cartProductQuantityElement.value)
        const currentSubTotal = parseInt(subtotalElement.innerHTML);           

        if (currentQuantity + count > 3) {
            Swal.fire({
                title: 'Limit Exceeded!',
                text: 'You can only add up to 3 items to your cart.',
                icon: 'error',
                timer: 5000
            });
            return;
        }
        
        const newQuantity = currentQuantity + count

        if (count === -1 && newQuantity < 1) {
            return; 
        }

        if(currentSubTotal < currentSubTotal){
            return
        }
        if (count == 1 && newQuantity > productQuantity) {
            Swal.fire({
                title: 'STOCK!',
                text: 'Product is out of stock.',
                icon: 'error',
                timer: 5000
            })
            return
        }

        const newSubtotal = newQuantity * productPrice
        if (count == 1) {
            document.getElementById(`subTotal${i}`).innerHTML = parseInt(subtotalElement.innerHTML) + parseInt(productPrice)
        } else {
            document.getElementById(`subTotal${i}`).innerHTML = parseInt(subtotalElement.innerHTML) - parseInt(productPrice)
        }
        $.ajax({
            url: '/changeQuantity',
            method: 'POST',
            data: {
                productId: productId,
                quantity: newQuantity,
                count: count
            },

            success: (response) => {
                let currentQuantity = parseInt(cartProductQuantityElement.value)
                let currentSubTotal = parseInt(subtotalElement.value)

                document.getElementById(`cartProductQuantity${i}`).value = currentQuantity + count
                document.getElementById(`subTotal${i}`).value = currentSubTotal * count
                
                if (response.count == 1) {
                    document.getElementById(`total`).innerHTML =  parseInt(response.grandTotal)
                } else {
                    document.getElementById(`total`).innerHTML = parseInt(response.grandTotal)
                }

            },
            error: (error) => {
                // Handle error
            }
        })
    }

    function confirmRemove(productId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = `/deleteItem?id=${productId}`;
            }
        })
    }
</script> --}}
{{!-- <script>
   function changeQuantity(event, action) {
    const quantityInput = event.target.closest('.quantity-control').querySelector('.quantity-input');
    let quantity = parseInt(quantityInput.value);

    if (action === 'increment') {
        quantity += 1; // Increase the quantity by 1
    } else if (action === 'decrement' && quantity > 0) {
        quantity -= 1; // Decrease the quantity by 1 (prevents going below 0)
    }

    quantityInput.value = quantity; // Update the value in the input field
}


</script> --}}
{{!-- <script>
function changeQuantity(event, action,productId) {
    // Locate the row element that contains the product
    const rowElement = event.target.closest('tr'); 

    // Get the product ID from a data attribute in the row
    //const productId = rowElement.dataset.productId; 
    console.log(productId)

    // Get the quantity input element and current quantity
    const quantityInput = rowElement.querySelector('.quantity-input');
    let quantity = parseInt(quantityInput.value);

    // Increment or decrement the quantity based on the action
    if (action === 'increment') {
        quantity += 1;
    } else if (action === 'decrement' && quantity > 0) {
        quantity -= 1;
    }

    // Update the quantity input's value in the UI
    quantityInput.value = quantity;

    // Send the updated product ID and quantity to the server
    updateCartItem(productId, quantity);
}

function updateCartItem(productId, quantity) { 
    const data = {
        productId: productId, // Pass the product ID
        quantity: quantity,   // Pass the updated quantity
    };

    // Send an AJAX request to update the product quantity on the backend
    fetch('/user/changeQuantity', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    })
        .then(response => response.json())
        .then(responseData => {
            if (responseData.success) {
                console.log('Cart updated successfully.');
            } else {
                console.error('Failed to update cart:', responseData.message);
            }
        })
        .catch(error => {
            console.error('Error updating cart:', error);
        });
}
</script>  --}}

{{!-- <script>

 function changeQuantity(event, action, productId) {
    // Locate the row element that contains the product
    const rowElement = event.target.closest('tr'); 

    // Get the quantity input element
    const quantityInput = rowElement.querySelector('.quantity-input');
    let currentQuantity = parseInt(quantityInput.value) || 0; // Ensure it's a number
    console.log(currentQuantity)

    // Update the quantity based on the action (+ or -)
    if (action === 'increment') {
        currentQuantity += 1;
    } else if (action === 'decrement' && currentQuantity > 1) {
        currentQuantity -= 1;
    }

    // Update the input field with the new quantity
    quantityInput.value = currentQuantity;

    // Recalculate the total price for this item
    const productPrice = parseFloat(rowElement.querySelector('.price span').innerText.replace('₹', '')) || 0;
    const totalPrice = (productPrice * currentQuantity).toFixed(2);
    console.log(totalPrice)

    // Update the subtotal in the UI
    const subtotalElement = rowElement.querySelector('.subtotal');
    if (subtotalElement) {
        subtotalElement.innerText = `₹ ${totalPrice}`;
    }

    // Send the updated quantity and productId to the server for persistence
    updateCartItem(productId, currentQuantity);


    function updateCartItem(productId, quantity) {
    fetch('/user/addToCart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId, quantity }), // Send productId and updated quantity
    })
    .then((response) => response.json())
    .then((data) => {
        if (data.success) {
            console.log('Cart item updated successfully:', data);
        } else {
            console.error('Failed to update cart item:', data.message);
        }
    })
    .catch((error) => {
        console.error('Error updating cart item:', error);
    });
}

}
 function confirmRemove(productId) {

    const rowToDelete = document.querySelector(`[data-product-id="${productId}"]`);
if (rowToDelete) {
    rowToDelete.remove(); // Direct removal
    console.log(`Removed row for productId: ${productId}`);
} else {
    console.error(`Row not found for productId: ${productId}`);
}

    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!'
    }).then((result) => {
        if (result.isConfirmed) {
            // Send the delete request via AJAX
            fetch('/user/deleteItem', {
                method: 'POST',  // Use POST for delete operations
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId })  // Send productId in the body
            })
            .then((response) => response.json())
            .then((data) => {
                if (data.success) {
                    // Successfully deleted, remove the row from the table
                    Swal.fire(
                        'Deleted!',
                        'Your item has been removed.',
                        'success'
                    );
                    document.querySelector(`[data-product-id="${productId}"]`) .remove(); // Remove the row from DOM
                } 
            })
            .catch((error) => {
                console.error('Error deleting item:', error);
                Swal.fire(
                    'Error!',
                    'There was an error processing your request.',
                    'error'
                );
            });
        }
    });
}  
</script> --}}

<script>
    // Function to handle quantity change
   async function changeQuantity(event, action, productId) {
    // Locate the row element that contains the product
    const rowElement = event.target.closest('tr');

    // Get the quantity input element
    const quantityInput = rowElement.querySelector('.quantity-input');
    const currentQuantity = parseInt(quantityInput.value) || 0; // Ensure it's a number

    // Calculate the new quantity based on the action
    let newQuantity = currentQuantity;
    if (action === 'increment') {
        newQuantity += 1;
    } else if (action === 'decrement' && currentQuantity > 0) {
        newQuantity -= 1;
    }

    // Prevent UI updates if the new quantity exceeds the allowed maximum
    if (newQuantity > 3) {
        Swal.fire({
            title: 'Maximum Quantity Reached!',
            text: "You can only have up to 3 items.",
            icon: 'warning',
            confirmButtonText: 'Okay',
        });
        return; // Stop execution
    }
   if (newQuantity === 0) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!',
        cancelButtonText: 'No, keep it',
    }).then((result) => {
        if (result.isConfirmed) {
            // User confirmed the deletion
            rowElement.remove(); // Remove the row from the table
            updateGrandTotal(); // Recalculate the grand total
            updateCartItem(productId, newQuantity); // Send the updated quantity to the server
            checkCartStatus(); // Check if the cart is now empty

            Swal.fire(
                'Deleted!',
                'The item has been removed from your cart.',
                'success'
            );
        } else {
            // User canceled the deletion
            Swal.fire(
                'Cancelled',
                'The item is still in your cart.',
                'info'
            );
        }
    });

    return; // Stop further execution until the user decides
}


    // Send the new quantity to the server and wait for confirmation
    const isUpdated = await updateCartItem(productId, newQuantity);

    if (isUpdated) {
        // Update the input field with the confirmed quantity
        quantityInput.value = newQuantity;

        // Recalculate the total price for this item
        const productPrice = parseFloat(rowElement.querySelector('.price span').innerText.replace('₹', '')) || 0;
        const totalPrice = (productPrice * newQuantity).toFixed(2);

        // Update the subtotal in the UI
        const subtotalElement = rowElement.querySelector('.subtotal');
        if (subtotalElement) {
            subtotalElement.innerText = `₹ ${totalPrice}`;
        }

        // Update the grand total for all items
        updateGrandTotal();
    } else { 
        // Revert the UI to the previous quantity if the server rejects the update
        Swal.fire({
            title: 'Stock Unavailable!',
            text: 'Not enough stock available for this product.',
            icon: 'error',
            confirmButtonText: 'Okay',
        });
    }
}

    
    
    // Function to send updated cart data to the server
    async function updateCartItem(productId, quantity) {
        try {
            console.log('Updating cart item:', { productId, quantity });

            const response = await fetch('/user/changeQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, quantity }),
            });

            // Check if the response is OK
            if (!response.ok) {
                throw new Error(`Failed to update cart item: ${response.statusText}`);
            }

             const data = await response.json();

        if (data.success) {
            console.log('Cart item updated successfully:', data);
            return true; // Indicate success
        } else {
            // Handle stock-related error
            if (data.message === 'Not enough stock available') {
                Swal.fire({
                    title: 'Stock Unavailable!',
                    text: 'Not enough stock available for this product.',
                    icon: 'warning',
                    confirmButtonText: 'Okay',
                });
            } else {
                alert(`Error: ${data.message}`);
            }
            return false; // Indicate failure
        }
        } catch (error) {
            console.error('Error updating cart item:', error);
        }
    }

 function updateGrandTotal() {
    let grandTotal = 0; // Total after discounts
    let actualCartTotal = 0; // Total without any discounts
    let actualCartOfferDiscount = 0; // Total discount offered

    // Get all the subtotals
    const subtotals = document.querySelectorAll('.subtotal');
    const rows = document.querySelectorAll('.cart-item-row'); // Each row of the cart items

    rows.forEach(row => {
        // Extract product details from the row
        const quantity = parseInt(row.querySelector('.quantity-input').value) || 0;
        const salePrice = parseFloat(row.querySelector('.price span').innerText.replace('₹', '').trim()) || 0;
        const regularPrice = parseFloat(row.getAttribute('data-regular-price')) || 0;

        const totalRegularPrice = regularPrice * quantity;
        const totalSalePrice = salePrice * quantity;

        // Accumulate the totals
        actualCartTotal += totalRegularPrice; // Without discounts
        grandTotal += totalSalePrice; // With discounts
        actualCartOfferDiscount += totalRegularPrice - totalSalePrice; // Discount difference
    });

    // Update the grand total in the UI
    const grandTotalElement = document.querySelector('#cartTotal');
    if (grandTotalElement) {
        grandTotalElement.innerText = `₹ ${grandTotal.toFixed(2)}`;
    }

    // Update the actualCartTotal in the UI
    const actualCartTotalElement = document.querySelector('.actualCartTotal');
    if (actualCartTotalElement) {
        actualCartTotalElement.innerText = `₹ ${actualCartTotal.toFixed(2)}`;
    }

    // Update the actualCartOfferDiscount in the UI
    const actualCartOfferDiscountElement = document.querySelector('.actualCartOfferDiscount');
    if (actualCartOfferDiscountElement) {
        actualCartOfferDiscountElement.innerText = `₹ ${actualCartOfferDiscount.toFixed(2)}`;
    }
}

    // Function to confirm and remove an item
   // Function to confirm and remove an item
function confirmRemove(productId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!',
    }).then((result) => {
        if (result.isConfirmed) {
            // Locate the row that needs to be removed
            const rowToDelete = document.querySelector(`[data-product-id="${productId}"]`);

            if (rowToDelete) {
                // Send the delete request via AJAX before removing the row
                fetch('/user/deleteItem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId }), // Send productId in the body
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success) {
                            Swal.fire('Deleted!', 'Your item has been removed.', 'success');
                            rowToDelete.remove(); // Now remove the row from DOM
                            updateGrandTotal();
                             checkCartStatus(); // Check if the cart is now empty


                        } else {
                            Swal.fire('Error!', data.message || 'Failed to remove item.', 'error');
                        }
                    })
                    .catch((error) => {
                        console.error('Error deleting item:', error);
                        Swal.fire('Error!', 'There was an error processing your request.', 'error');
                    });
            } else {
                console.error(`Row not found for productId: ${productId}`);
            }
        }
    });
}


</script>



<style>


/* Style for the empty cart message box */
.empty-cart-message {
    background-color: #f8d7da; /* Light red background */
    color: #721c24; /* Dark red text color */
    border: 1px solid #f5c6cb; /* Red border */
    border-radius: 8px; /* Rounded corners */
    padding: 20px;
    font-size: 18px;
    font-weight: bold;
    text-align: center;
    margin-top: 20px;
    width: 304px;
    height:88px
}

.coupon-section {
    border: 1px solid #ddd;
    padding: 15px;
    border-radius: 10px;
    background-color: #fff;
    width: 314px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
.coupon-section h5 {
    margin-bottom: 10px;
    font-weight: bold;
    color: #1f2124;
}
.input-group .form-control {
    border-right: none;
    margin-top: 12px;
}
.input-group .btn {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}


/* Optionally, style the 'Your Cart is Empty' text */
.empty-cart-message p {
    margin: 0;
    font-size: 22px;
    color: #721c24;
}

.breadcrumb-nav {
     padding: 15px 0;
    background-color: #f8f9fa;
    font-size: 14px;
}

.breadcrumb-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-wrap: wrap;
}

.breadcrumb-list li {
    display: inline;
}

.breadcrumb-list li a {
    text-decoration: none;
    color: #007bff; /* Blue color for links */
}

.breadcrumb-list li a:hover {
    text-decoration: underline;
}

.breadcrumb-list li.active {
    color: #6c757d; /* Gray color for the active/current page */
}

.breadcrumb-list li + li::before {
    content: '>';
    margin: 0 10px;
    color: #6c757d;
}
/* General Styles */
body {
    font-family: 'Poppins', sans-serif;
    background-color: #f7f8fa;
    color: #333;
    margin: 0;
    padding: 0;
}

/* Main Section */
section {
    padding: 50px 0;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
}

.table {
    background: #fff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.table thead th {
    background: #abbdcf
    color: #fff;
    font-size: 16px;
    font-weight: bold;
    text-transform: uppercase;
    padding: 15px 10px;
}

.table tbody tr:nth-child(even) {
    background-color: #f9f9f9;
}

.table tbody tr:hover {
    background-color: #ecefff;
    transform: scale(1.01);
    transition: all 0.3s ease-in-out;
}

.table td {
    padding: 15px;
    vertical-align: middle;
}

/* Image Styling */
.product-thumbnail img {
    max-width: 80px;
    border-radius: 8px;
}

/* Quantity Controls */
.quantity-control {
    display: flex;
    align-items: center;
    justify-content: space-around;
    gap: 5px;
}

.quantity-input {
    text-align: center;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
}

.increment-button,
.decrement-button {
    
    color: #fff;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
}

.increment-button:hover,
.decrement-button:hover {
    background: #1f1f20;
}

/* Action Button */
.action a {
    color: #ff4d4d;
    font-size: 20px;
    transition: color 0.3s ease-in-out;
}

.action a:hover {
    color: #e60000;
}

/* Cart Totals */
.cart-totals {
    background: #fff;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    padding: 20px;
    text-align: left;
    width: 314px;
}

.cart-totals h4 {
    color: #181a1e;
    margin-bottom: 15px;
}

.cart-totals table {
    width: 100%;
    font-size: 16px;
}

.cart-totals .font-lg {
    color: #1b7835;
    font-weight: 700;
}


.btn {
    display: block;
    width: 100%;
    background: linear-gradient(90deg, #3d3c3e, #1c1d1e);
    color: #fff;
    text-align: center;
    padding: 10px 15px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    font-weight: bold;
    text-transform: uppercase;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
}

.btn:hover {
   /* background: #2575fc;*/
    color: #fff;
    transform: translateY(-2px);
}
.offer-discount {
    color: green;
    font-weight: 23px;
}


/* Responsive Styling */
@media (max-width: 768px) {
    .table thead {
        display: none;
    }

    .table tbody tr {
        display: flex;
        flex-direction: column;
        gap: 15px;
        padding: 15px;
        background-color: #fff;
        border-radius: 10px;
        margin-bottom: 15px;
    }

    .table tbody td {
        text-align: left;
    }

    .cart-totals {
        margin-top: 30px;
        
    }
}
 <style>
      .navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 40px;
    background-color: #f8f9fa;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.logo {
    font-size: 24px;
    font-weight: bold;
}

.nav-links {
    list-style: none;
    display: flex;
    gap: 20px;
}

.nav-links a {
    text-decoration: none;
    color: #333;
    font-weight: 500;
}

.auth-links a {
    text-decoration: none;
    color: #333;
    font-weight: 500;
}  
 .fas.fa-user-circle {
    margin-right: 8px; /* Space between icon and username */
    font-size: 20px;   /* Icon size */
    color: #333;       /* Icon color */
}
.fas.fa-shopping-cart {
    margin-right: 8px; /* Space between icon and username */
    font-size: 20px;   /* Icon size */
    color: #333;       /* Icon color */
}
.dropdown{
    position: relative;
    display: inline-block;
    
  } 
  .dropdown-content{
    display: none;
    position: absolute;
    background-color: white;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1000;
    right: 0;
  }
  .dropdown-content a{
    color: black;
    padding: 12px 16px ;
    text-decoration: none;
    display: block;
    width: 100%;
    }
    .dropdown-content a:hover{
        background-color: #f1f1f1;
    }
    .dropdown:hover .dropdown-content{
        display: block;
    }
    #header{
        position: relative;
        z-index: 500;
    }
     .shopping-icon a{
        text-decoration: none;
    }


 
</style>